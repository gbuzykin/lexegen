/* Lexegen autogenerated analyzer file - do not edit! */
/* clang-format off */

static uint8_t symb2meta[256] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5, 6, 4, 7, 1,
    1, 4, 4, 4, 4, 1, 8, 9, 4, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 1, 13, 1, 14, 4, 1, 15, 15, 15, 15, 15, 15,
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 19, 20, 16, 1, 21, 22, 15,
    15, 15, 23, 16, 16, 24, 16, 16, 16, 16, 25, 26, 27, 16, 28, 29, 30, 16, 31, 16, 32, 16, 16, 33, 4, 34, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1
};

static int def[67] = {
    -1, -1, 0, 1, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, 12, 12, 33, -1, -1, -1, 3, -1, -1, -1, 14, -1, -1, 45, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1
};

static int base[67] = {
    0, 34, 68, 102, 134, 57, 0, 70, 0, 0, 0, 0, 165, 53, 197, 217, 135, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 161, 240, 0, 95,
    0, 0, 118, 137, 124, 0, 132, 0, 249, 0, 0, 132, 0, 0, 249, 142, 151, 0, 251, 0, 0, 0, 275, 284, 0, 146, 144, 154,
    149, 148, 0, 149, 161, 174, 209, 0
};

static int next[319] = {
    -1, 9, 7, 51, 9, 10, 52, 53, 9, 9, 37, 37, 9, 9, 9, 54, 54, 9, 9, 9, 9, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
    54, 9, 9, 49, 49, 40, 49, 50, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 43, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 49, 49, 49, 49, 49, 49, 6, 12, 8, 7, 32, 6, 6, 6, 11, 6, 6, 6, 6, 6, 6, 6, 13, 14, 6, 30, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 15, 6, 39, 39, 31, 39, 39, 39, 39, 41, 39, 39, 39, 39, 39, 39, 39, 39, 42, -1, 44, 39, 39, 39, 39,
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 8, 36, 35, 9, 9, 37, 37, 45, 16, 16, 34, 34, 9, 9, 36, 46, 46, 47, 9, 9,
    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 33, 38, 17, 48, 28, 28, 62, 58, 59, 28, 60, 61, 63, 34, 34, 28, 28, 28, 64, 34, 34,
    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 18, 18, 65, 18, 18, 18, 18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18,
    18, 20, 21, 22, 18, 23, 18, 18, 24, 18, 25, 26, 27, 18, 18, 16, 16, 66, -1, -1, -1, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 29, 29, -1, -1, -1, 29, -1, -1, -1, -1, -1, 29, 29, 29, 46, 46, -1, -1, -1, -1, 46, 46, 46, 46, 46,
    46, 46, 46, 46, 46, 46, 46, 55, 39, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, 54, 54, -1, -1, -1, 54, 54, 56, -1, -1,
    57, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, -1, -1
};

static int check[319] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 2, 7, 13, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 19, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 30, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 33, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 35, 34, 4, 4, 37, 37, 42, 16, 16, 34, 34, 4,
    4, 34, 46, 46, 46, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 4, 16, 47, 27, 27, 56, 57, 58, 27, 59, 60, 62, 12, 12,
    27, 27, 27, 63, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 64, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 65, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 28, 28, 39, 28, 49, 28, 49, 39, 28, 28, 28, 28, 28, 28, 45, 45, 39, 39, 39,
    49, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 53, 39, 49, 49, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 53, 53,
    53, 54, 54, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54
};

static int accept[67] = {
    0, 0, 0, 0, 0, 0, 54, 38, 50, 72, 70, 44, 54, 40, 54, 48, 0, 46, 22, 4, 8, 10, 12, 16, 14, 18, 20, 22, 6, 6, 4, 4,
    42, 0, 0, 0, 3, 64, 52, 28, 36, 30, 72, 72, 34, 0, 0, 0, 32, 24, 26, 68, 66, 72, 62, 60, 0, 0, 0, 0, 0, 56, 0, 0, 0,
    0, 58
};

static int lls_idx[68] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

static int lls_list[1] = {
    1
};

static int lex(const char* first, const char* last, int** p_sptr, size_t* p_llen, int flags) {
    int* sptr = *p_sptr;
    int* sptr0 = sptr - *p_llen;
    int state = *(sptr - 1);
    while (first != last) { /* Analyze till transition is impossible */
        uint8_t meta = symb2meta[(unsigned char)*first];
        do {
            int l = base[state] + meta;
            if (check[l] == state) {
                state = next[l];
                break;
            }
            state = def[state];
        } while (state >= 0);
        if (state < 0) { goto unroll; }
        *sptr++ = state, ++first;
    }
    if ((flags & flag_has_more) || sptr == sptr0) {
        *p_sptr = sptr;
        *p_llen = (size_t)(sptr - sptr0);
        return err_end_of_input;
    }
unroll:
    *p_sptr = sptr0;
    while (sptr != sptr0) { /* Unroll down to last accepting state */
        int n_pat = accept[(state = *(sptr - 1))];
        if (n_pat > 0) {
            enum { trailing_context_flag = 1, flag_count = 1 };
            int i;
            if (!(n_pat & trailing_context_flag)) {
                *p_llen = (size_t)(sptr - sptr0);
                return n_pat >> flag_count;
            }
            n_pat >>= flag_count;
            do {
                for (i = lls_idx[state]; i < lls_idx[state + 1]; ++i) {
                    if (lls_list[i] == n_pat) {
                        *p_llen = (size_t)(sptr - sptr0);
                        return n_pat;
                    }
                }
                state = *(--sptr - 1);
            } while (sptr != sptr0);
            *p_llen = (size_t)(sptr - sptr0);
            return n_pat;
        }
        --sptr;
    }
    *p_llen = 1; /* Accept at least one symbol as default pattern */
    return predef_pat_default;
}
