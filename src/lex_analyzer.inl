// Lexegen autogenerated analyzer file - do not edit!

static int symb2meta[256] = {
    -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 0, 5,
    0, 0, 6, 6, 6, 6, 0, 7, 8, 6, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 0, 0, 11, 0, 12, 6, 0, 13, 13, 13, 13, 13, 13, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 17, 18, 14, 0, 19, 20, 13, 13, 13,
    21, 14, 14, 22, 14, 14, 14, 14, 23, 24, 25, 14, 26, 27, 28, 14, 29, 14, 30, 14, 14, 31, 6, 32, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0
};

static int def[62] = {
    -1, -1, 0, 1, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, 12, 12, 33, -1, -1, -1, 3, -1, -1, 14, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1
};

static int base[62] = {
    0, 33, 66, 99, 130, 56, 69, 68, 72, 72, 72, 72, 160, 54, 191, 211, 131, 101, 101, 92, 115, 115, 115, 115, 115, 115,
    115, 156, 233, 115, 106, 133, 133, 132, 136, 124, 138, 129, 142, 242, 142, 142, 142, 142, 245, 142, 142, 142, 240,
    256, 142, 117, 119, 145, 141, 140, 170, 142, 149, 148, 155, 193
};

static int next[289] = {
    10, 7, 46, 9, 47, 48, 10, 10, 10, 37, 37, 10, 10, 49, 49, 10, 10, 10, 10, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
    49, 49, 10, 10, 44, 44, 40, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 42, 44, 44, 44, 44, 44, 44, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 44, 6, 12, 8, 7, 6, 6, 32, 6, 11, 6, 6, 6, 6, 6, 6, 13, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 15, 6, 39, 39, 30, 39, 39, 39, 39, 41, 39, 39, 39, 39, 39, 39, 39, 39, 31, 43, 39, 39, 39, 39, 39,
    39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 8, -1, 10, 10, 36, 35, 37, 37, 16, 16, 57, 10, 10, 34, 34, 53, 36, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 33, 38, 17, 54, 28, 28, 55, 56, 28, 58, 59, 60, 34, 34, 28, 28, 28, 61, 34,
    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 18, 18, -1, 18, 18, 18, 18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 18,
    18, 20, 21, 22, 18, 23, 18, 18, 24, 18, 25, 26, 27, 18, 18, 16, 16, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 16, 16,
    16, 16, 16, 16, 29, 29, -1, 50, 29, -1, -1, -1, -1, -1, 29, 29, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 49, 49,
    52, 39, 49, 49, 39, 39, 39, 39, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, -1, -1
};

static int check[289] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 2, 7, 2, 2, 13, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    30, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 33, 4, 4, 35, 34, 37, 37, 16, 16, 51, 4, 4, 34, 34, 52, 34,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 4, 16, 53, 27, 27, 54, 55, 27, 57, 58, 59, 12, 12, 27, 27, 27, 60, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 28, 28, 39, 48, 28, 44, 44, 39, 28, 28, 28, 28, 28, 28, 28, 28, 39, 39, 28, 44, 28, 28, 48, 49, 49, 48,
    39, 49, 49, 39, 39, 39, 39, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49
};

static int accept[62] = {
    0, 0, 0, 0, 0, 0, 52, 36, 48, 68, 70, 42, 52, 38, 52, 46, 0, 44, 22, 4, 8, 10, 12, 16, 14, 18, 20, 22, 6, 6, 4, 4,
    40, 0, 0, 0, 3, 62, 50, 28, 34, 30, 70, 32, 24, 26, 66, 64, 70, 60, 58, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 56
};

static int lls_idx[63] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

static int lls_list[1] = {
    1
};

int lex(const char* first, const char* last, std::vector<int>& state_stack, unsigned& llen, bool has_more) {
    assert(first <= last && last - first >= llen);
    enum { kTrailContFlag = 1, kFlagCount = 1 };
    int state = state_stack.back();
    const char* p = first + llen;
    while (true) {  // Fill buffers till transition is impossible
        if (p == last) {
            if (!has_more) { break; }
            llen = static_cast<unsigned>(p - first);
            return err_end_of_input;
        }
        int meta = symb2meta[static_cast<unsigned char>(*p)];
        if (meta < 0) { break; }
        do {
            int l = base[state] + meta;
            if (check[l] == state) {
                state = next[l];
                break;
            }
            state = def[state];
        } while (state >= 0);
        if (state < 0) { break; }
        state_stack.push_back(state);
        ++p;
    }
    while (p != first) {  // Unroll downto last accepting state
        int n_pat = accept[state_stack.back()];
        if (n_pat > 0) {
            bool has_trailling_context = n_pat & kTrailContFlag;
            n_pat >>= kFlagCount;
            if (has_trailling_context) {
                do {
                    state = state_stack.back();
                    for (int i = lls_idx[state]; i < lls_idx[state + 1]; ++i) {
                        if (lls_list[i] == n_pat) { goto accept_pat; }
                    }
                    --p;
                    state_stack.pop_back();
                } while (p != first);
            }
        accept_pat:
            llen = static_cast<unsigned>(p - first);
            state_stack.erase(state_stack.end() - llen, state_stack.end());
            return n_pat;
        }
        --p;
        state_stack.pop_back();
    }
    if (p == last) { return err_end_of_input; }
    ++p, llen = 1;  // Accept at least one symbol as default pattern
    return predef_pat_default;
}
